pipeline {
    environment {
        env = "prod"
        registryCredential = "registryCredential"

        serviceName = "demo-service-frontend" // Replace your serviceName
        imageName = "$serviceName"+":"+"$params.versionTag"  // <prefix>/serviceName // prefix = project name
        project = "demo-service"  
        namespace = "$project"+ "-" + "$env"
    }
    agent any
    stages {
        stage('Pull image') {
            steps {
                script {
                    a = docker.image("alpine/k8s:1.19.8")
                    docker.withRegistry('', "${env.registryCredential}") {
                        a.pull()
                    }
                }
            }
        }

        stage('Apply Environment variable to deployment file') {
            steps {
                script {
                    sh "envsubst < $serviceName/manifests/deployment_template.yaml > $serviceName/manifests/deployment.yaml"
                    sh "envsubst < $serviceName/manifests/service_template.yaml > $serviceName/manifests/service.yaml"
                    sh "envsubst < $serviceName/manifests/ingress_template.yaml > $serviceName/manifests/ingress.yaml"
                }
            }
        }

        stage('create secret and deploy app to kube cluster') {
            agent {
                  docker {
                    image "alpine/k8s:1.19.8"
                    reuseNode true
                }
            }
            steps {
                withKubeConfig([credentialsId: 'kube_credential', serverUrl: 'https://172.16.16.100:6443']) {
                    withCredentials([file(credentialsId: 'serviceEnv', variable: 'serviceEnv')]) {
                        script {
                            sh """
                            cat $serviceName/manifests/deployment.yaml
                            cat $serviceName/manifests/service.yaml
                            cat $serviceName/manifests/ingress.yaml
                            kubectl create secret generic $serviceName-${env.env}-secret --from-env-file=$serviceEnv -n $namespace -o yaml --dry-run | kubectl replace -f -
                            kubectl apply -n $namespace -f $serviceName/manifests/deployment.yaml
                            kubectl apply -n $namespace -f $serviceName/manifests/service.yaml
                            kubectl apply -n $namespace -f $serviceName/manifests/ingress.yaml
                            """
                            sh "kubectl get no"
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // sh "docker rmi narawitrt" + "/" + "demo-service" + ":"+"${env.version_tag}" 
                    echo "cleanup"
                }      
            }
        }
    }
}